//Name: Abdurahman Hersi
//Student number: 1455657
//Assignment 1
//Due date: October 5,2016



#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>


#define BLACK 1
#define WHITE 0


int c, x;
int max_x, max_y, num_pt;
int inputfile = 0, outputfile = 0;
int *x_coordinate, *y_coordinate;
int root;


// declaring functions
void tree(FILE *fp2, FILE *fp3, FILE *fp4, char *argv[]);
void command_option(FILE *fp, int argc, char *argv[]);
void instances(FILE *file, FILE *fp, int argc);
void correct(FILE *fp);
void print(FILE *fp, char *argv[]);
void read_file(FILE *fp, char *argv[]);


struct dats{
  int color;
  int xvalue;
  int yvalue;
  int id;
};


int main(int argc, char *argv[] )
{

  FILE *fp;
  FILE *file;
  FILE *fp2;
  FILE *fp3;
  FILE *fp4;
  command_option(fp,argc,argv);
  read_file(fp, argv);

  tree(fp2,fp3,fp4, argv);  
  // command_option(fp,argc, argv);
  // instances(file, fp,argc);
  // if (argc>1){
  //   read_file(fp, argv);
  //  print(fp, argv);
  // free(x_coordinate);
  // free(y_coordinate);
}

    
void tree(FILE *fp2, FILE *fp3,FILE *fp4, char *argv[]){
  int root_distance;
  int i,h,k, b, identity1, identity2,identity3, identity4, smallest,temp, temp2;
  int x,y, j, small[20], total, max, max1;
  if(outputfile>0){
    fp3 = fopen(argv[outputfile], "w");
}
  fp4 = fopen("instance_after","w");
    
    fprintf(fp4,"%d %d\n", max_x, max_y);
    fprintf(fp4, "%d\n", num_pt);
    for(i = 0; i<num_pt; i++){
        fprintf(fp4,"%d %d\n", x_coordinate[i], y_coordinate[i]);
    }
    fprintf(fp4,"Edges of the MST by Prim's algorithm:\n");
    
    
  struct dats points[1000];
  points[0].color = BLACK;
  points[0].xvalue = x_coordinate[0];
  points[0].yvalue = y_coordinate[0];
  points[0].id = 0;
  if(outputfile>0){
    fprintf(fp3, "Choosing point 0 as the root...\n");
  }else{
  printf("Choosing point 0 as the root...\n");
  }
  for(i = 1, h =0, k = 1; i< num_pt; i++,h++, k++){
  root_distance = abs(x_coordinate[0] - x_coordinate[i]) + abs(y_coordinate[0] - y_coordinate[i]);
  points[i].xvalue = x_coordinate[i];
  points[i].yvalue = y_coordinate[i];
  points[k].color = WHITE;
  points[i].id = k;
  
  
  if(outputfile>0){
   fprintf(fp3, "Point %d has a distance of %d to the tree, parent 0;\n", i, root_distance);
  }else{
  printf("Point %d has a distance of %d to the tree, parent 0;\n", i,root_distance);
  }  
  }
  if(outputfile>0){
    fprintf(fp3, "Edges of the MST by Prim's algorithm:\n");
  }else{
  printf("Edges of the MST by Prim's algorithm:\n");
  }

  temp2 = 1000;
  identity1 = 0;
  identity2 = 0;
  for(b=0;b<num_pt;b++){
    smallest = 1000;

    points[identity2].color = BLACK;
    for(x = 0;x<num_pt;x++){
      
      if(points[x].color == BLACK){
	for(y=0,j=0;y<num_pt;y++){
	  
	  if(points[y].color == WHITE){
	    
	    temp = abs(points[x].xvalue - points[y].xvalue) + abs(points[x].yvalue - points[y].yvalue);
	    
	      if(temp==smallest){
		if(points[x].xvalue > points[y].xvalue){
		  max1 = points[x].xvalue;
		}else{
		  max1 = points[y].xvalue;
		}
	    if(abs(points[x].yvalue - points[y].yvalue)> identity3){
	      smallest = temp;
	      identity2 = points[y].id;
	      identity1 = points[x].id;
	      identity3 = abs(points[x].yvalue - points[y].yvalue);
	      identity4 = abs(points[x].xvalue - points[y].xvalue);
	    }
	    else if(identity3 > abs(points[x].yvalue - points[y].yvalue)){
	        smallest = temp;
	        identity2 = points[y].id;
	        identity1 = points[x].id;
		identity3 = abs(points[x].yvalue - points[y].yvalue);
		identity4 = abs(points[x].xvalue - points[y].xvalue);
	    }
	    else{
	      if(max1 >= max){
		smallest = temp;
		identity2 = points[y].id;
		identity1 = points[x].id;
		identity3 = abs(points[x].yvalue - points[y].yvalue);
		identity4 = abs(points[x].xvalue - points[y].xvalue);
	      }
	    }
	      }
	  


	    if(temp<smallest){
	      j = j +1;
		smallest = temp;
		//printf("%d\n", smallest);
		identity2 = points[y].id;
		identity1 = points[x].id;
		identity3 = abs(points[x].yvalue - points[y].yvalue);
		if(points[x].xvalue > points[y].xvalue){
		  max = points[x].xvalue;
		}else{
		  max = points[y].xvalue;
		}
		
	    }
	  }
	}
      }
      
    }
    if(b<num_pt-1){
    small[b]= smallest;
    total = total + small[b];
    fprintf(fp4, "%d %d %d\n", identity1, identity2, small[b]);
    if(outputfile>0){
      fprintf(fp3, "%d\t%d\t%d\n", identity1, identity2, small[b]);
    }else{
    printf("%d\t%d\t%d\n", identity1, identity2, small[b]);
    }    
    }
  }
  if(outputfile>0){
    fprintf(fp3,"The total length of the MST is %d\n", total);
  }else{
  printf("The total length of the MST is %d\n", total);
  }


fclose(fp3);
fclose(fp4);

 
 

    
}    
//---------------------------
void command_option(FILE *fp, int argc, char *argv[]){
  int i;
  if (argc<0){
    printf("file structure error");
    exit(0);
  }
     
  fp = fopen(argv[2], "r");
  inputfile = 0;
  outputfile = 0;
  for (i = 1; i<argc; i++){
    if(strcmp (argv[i], "-i") == 0)
      inputfile = i + 1;
    else if (strcmp(argv[i], "-o") == 0)
      outputfile = i +1;
       
  }
}
//---------------------------
void instances(FILE *file, FILE *fp, int argc){
  char buf[40];
    
  int k, i, inst;
  if (inputfile ==0 && outputfile ==0){
    printf("Generating random instances ...\n");

    printf("Enter the circuit board size MAX_X MAX_Y:");
    scanf("%d%d", &max_x, &max_y);

    if(max_x>1000 || max_x<0){
      printf("The MAX_X value is out of range\n");
      fclose(fp);
      exit(0);
    }
    if(max_y>1000 || max_y<0){
      printf("The MAX_Y value is out of range\n");
      fclose(fp);
      exit(0);
    }

    printf("Enter the number of points:");
    scanf("%d", &num_pt);
      
    if(num_pt>10000 || num_pt<0){
      printf("The NUM_PT value is out of range\n");
      fclose(fp);
      exit(0);
    }



    printf("Enter the number of random instances to be generate:");
    scanf("%d", &inst);

      

    for (i=1; i<=inst; i++){
      sprintf(buf, "instance%d_%d.txt", num_pt, i);
      printf("\n%s generated", buf);
      file = fopen(buf,"w");
      
      fprintf(file, "################################\n");
      fprintf(file, "#%s\n", buf);
      fprintf(file, "#area [0, MAX_X] x [0, MAX_Y]\n");
      fprintf(file, "%d\t%d\n", max_x, max_y);
      fprintf(file,"#number of points NUMP_pt\n");
      fprintf(file, "%d\n", num_pt);
      fprintf(file, "#coordinates\n");
      x_coordinate = (int *)malloc(num_pt * sizeof(int));
      y_coordinate = (int *)malloc(num_pt * sizeof(int)); 
      for(k=0; k<num_pt; k++){
	x_coordinate[k] = rand()%100;
	y_coordinate[k] = rand()%100;
        fprintf(file, "%d\t%d\n", x_coordinate[k], y_coordinate[k]);
      }
      fprintf(file,"#end of instance\n");
      free(x_coordinate);
      free(y_coordinate);
      fclose(file);
      
    }
    printf("... done!\n");
    //      file = fopen("hello.txt","w");
    //      if (fp == NULL){
    //printf("Error opening file!\n");
    //return -1;
    // }
    exit(0);
  }// close bracket for if statement starting witin inputfile==0
}
//-----------------------------------------

void read_file(FILE *fp, char *argv[]){
  if((fp = fopen(argv[inputfile], "r")) == NULL){
    printf("Input file does not exist");
    exit(0);
            
  }
  correct(fp);
}
    


void correct(FILE *fp){
  int i;
  

  while(fscanf(fp, "%d", &max_x) != 1){     // while loop to store the max_x value. If max_x value
    if(ferror(fp)){                         // comes first, then it skips everything until next commment
      printf("File structure error\n");       
      fclose(fp);
      exit(0);
    }
    if(feof(fp)){
      printf(" No integer to read\n");
      fclose(fp);
      exit(0);
    }
          
    fscanf(fp, "%*[^\n]"); //skip the rest of the line

  }
  if(max_x>1000 || max_x<0){
    printf("The MAX_X value is out of range\n");
    fclose(fp);
    exit(0);
  }
  

  if (fscanf(fp, "%d", &max_y) !=1) {             // stores max_y value into max_y
         
    printf(" There is not two integer values for max_x and max_y");
    fclose(fp);
    exit(0);
  }

  if(max_y>1000 || max_y<0){
    printf("The MAX_Y value is out of range\n");
    fclose(fp);
    exit(0);
  }

  while (fscanf(fp, "%d", &num_pt) != 1){
    if (ferror(fp)){
      printf("Read error with num_pt ");
      fclose(fp);
      exit(0);
    }
    if (feof(fp)){
      printf("no integer to read");
      fclose(fp);
      exit(0);
    }
    fscanf(fp, "%*[^\n]"); // skips the rest of the line
  }

  if(num_pt>10000 || num_pt<1){
    printf("The Num_pt  value is out of range\n");
    fclose(fp);
    exit(0);
  }

       
  x_coordinate = (int *)malloc(num_pt * sizeof(int));
  y_coordinate = (int *)malloc(num_pt * sizeof(int));

  int counter;
  counter = 0;
  for (i = 0; i< num_pt; i++){
    while (fscanf(fp, "%d", &x_coordinate[i]) !=1){
          
      if(ferror(fp)){
	/* read error */
	fclose(fp);
	exit(0);
      }
      if (feof(fp)){
	printf(" num_pt and number of coordinates don't match\n");
	/* no integer to read */
	fclose(fp);
	exit(0);
	      
      }
      fscanf(fp, "%*[^\n]"); /* skips the rest of the line */
          
           
    }
    counter = counter+1;
      
    
    if (fscanf(fp, "%d", &y_coordinate[i]) != 1){
      /* y_coordinate not following x_coordinate */
      printf(" Y coordinate not following X coordinate");  
      fclose(fp);
      exit(0);
    }
      
        

    if(x_coordinate[i]<0 || x_coordinate[i]>max_x ){
      fclose(fp);
      printf("X coordinate not in range\n");
      exit(0);
    }
    if(y_coordinate[i]<0 || y_coordinate[i]>max_y){
      fclose(fp);
      printf("Y coordinate not in range\n");
      exit(0);
    }

      
  }

  fclose(fp);
  if(counter !=num_pt){
    printf("NUM_PT and the number of coordinates do not match\n");
    exit(0);
  }
        
}
//-----------------------------------------------

void print(FILE *fp, char *argv[]){
  int i;
  if(outputfile>0){
    if((fp = fopen(argv[outputfile], "w")) == NULL){
      printf(" Open file error");
      exit(0);
        
    }
    fprintf(fp, "################################\n");
    fprintf(fp, "#%s\n", argv[inputfile]);
    fprintf(fp, "#area [0, MAX_X] x [0, MAX_Y]\n");
    fprintf(fp, "%d\t%d\n", max_x, max_y);
    fprintf(fp,"#number of points NUMP_pt\n");
    fprintf(fp, "%d\n", num_pt);
    fprintf(fp, "#coordinates\n");
    for(i=0; i<num_pt; i++){
      fprintf(fp, "%d\t%d\n", x_coordinate[i], y_coordinate[i]);
    }  
    fprintf(fp,"#end of instance\n");
    fclose(fp);
  }
  else{ 
    printf("########################################\n");
    printf("#%s\n", argv[inputfile]);
    printf("#area [0,MAX_X] x [0, MAX_Y]\n");
    printf("%d\t%d\n", max_x, max_y);
    printf("#number of points NUM_PT\n");
    printf("%d\n", num_pt);
    printf("#coordinates\n");
    for (i = 0; i< num_pt; i++){
      printf("%d\t%d\n", x_coordinate[i], y_coordinate[i]);
    }
    printf("#end of instance\n");
  }
  free(x_coordinate);
  free(y_coordinate);

    

  
  //fclose(fp);
  exit(0);
}


